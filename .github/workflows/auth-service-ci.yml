name: Auth Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/auth-service/**'
      - '.github/workflows/auth-service-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/auth-service/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: auth-service
  SERVICE_PATH: services/auth-service

jobs:
  # 코드 품질 검사
  code-quality:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/requirements.txt
      
      - name: 의존성 설치
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install -r requirements.txt
          pip install flake8 black isort pytest-cov
      
      - name: 코드 포맷팅 검사 (Black)
        run: |
          cd ${{ env.SERVICE_PATH }}
          black --check --diff app/
      
      - name: Import 정렬 검사 (isort)
        run: |
          cd ${{ env.SERVICE_PATH }}
          isort --check-only --diff app/
      
      - name: 린팅 검사 (flake8)
        run: |
          cd ${{ env.SERVICE_PATH }}
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # 테스트 실행
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: auth_test_db
          POSTGRES_USER: auth_test_user
          POSTGRES_PASSWORD: auth_test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/requirements.txt
      
      - name: 의존성 설치
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx
      
      - name: 테스트 실행
        env:
          DATABASE_URL: postgresql://auth_test_user:auth_test_pass@localhost:5432/auth_test_db
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: true
        run: |
          cd ${{ env.SERVICE_PATH }}
          pytest --cov=app --cov-report=xml --cov-report=html
      
      - name: 코드 커버리지 업로드
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.SERVICE_PATH }}/coverage.xml
          flags: auth-service
          name: auth-service-coverage

  # 보안 스캔
  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Python 보안 스캔 (Bandit)
        run: |
          pip install bandit
          cd ${{ env.SERVICE_PATH }}
          bandit -r app/ -f json -o bandit-report.json || true
      
      - name: 의존성 취약점 스캔 (Safety)
        run: |
          pip install safety
          cd ${{ env.SERVICE_PATH }}
          safety check --json --output safety-report.json || true
      
      - name: Trivy 파일시스템 스캔
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ env.SERVICE_PATH }}
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: SARIF 결과 업로드
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # Docker 이미지 빌드 및 푸시
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3
      
      - name: Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 이미지 보안 스캔 (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'
      
      - name: 이미지 SARIF 결과 업로드
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # GitOps 레포지토리 업데이트 (ArgoCD용)
  update-gitops:
    name: GitOps 레포지토리 업데이트
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: GitOps 레포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/iam-manager-gitops
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
      
      - name: 이미지 태그 업데이트
        run: |
          cd gitops
          NEW_TAG="${{ github.sha }}"
          
          # Kustomization 파일에서 이미지 태그 업데이트
          sed -i "s|newTag:.*|newTag: ${NEW_TAG}|g" overlays/production/kustomization.yaml
          
          # 변경사항 커밋 및 푸시
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update auth-service image to ${NEW_TAG}" || exit 0
          git push

  # 배포 알림
  notify:
    name: 배포 알림
    runs-on: ubuntu-latest
    needs: [build-and-push, update-gitops]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 성공 알림
        if: needs.build-and-push.result == 'success' && needs.update-gitops.result == 'success'
        run: |
          echo "✅ Auth Service 배포 성공!"
          echo "이미지: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
      
      - name: 실패 알림
        if: needs.build-and-push.result == 'failure' || needs.update-gitops.result == 'failure'
        run: |
          echo "❌ Auth Service 배포 실패!"
          exit 1