name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # 매일 오전 2시 실행

env:
  REGISTRY: ghcr.io

jobs:
  # 통합 테스트
  integration-test:
    name: 마이크로서비스 통합 테스트
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: integration_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Docker Compose 설정
        run: |
          # 통합 테스트용 docker-compose 파일 생성
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            auth-service:
              build: ./services/auth-service
              environment:
                - DATABASE_URL=postgresql://test_user:test_pass@host.docker.internal:5432/integration_test_db
                - SECRET_KEY=test-secret-key
                - DEBUG=true
              ports:
                - "8000:8000"
              depends_on:
                - postgres
              extra_hosts:
                - "host.docker.internal:host-gateway"
            
            iam-manager:
              build: ./services/iam-manager
              environment:
                - DATABASE_URL=postgresql://test_user:test_pass@host.docker.internal:5432/integration_test_db
                - AUTH_SERVICE_URL=http://auth-service:8000
                - AWS_ACCESS_KEY_ID=testing
                - AWS_SECRET_ACCESS_KEY=testing
                - AWS_DEFAULT_REGION=us-east-1
              ports:
                - "8001:8001"
              depends_on:
                - auth-service
              extra_hosts:
                - "host.docker.internal:host-gateway"
          EOF
      
      - name: 서비스 시작
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
          # 서비스 준비 대기
          echo "서비스 시작 대기 중..."
          sleep 30
          
          # 헬스체크
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8001/health || exit 1
      
      - name: 통합 테스트 실행
        run: |
          # Auth Service 테스트
          echo "=== Auth Service 테스트 ==="
          
          # 관리자 생성
          ADMIN_RESPONSE=$(curl -s -X POST http://localhost:8000/api/v1/users/init-admin \
            -H "Content-Type: application/json" \
            -d '{"username":"testadmin","password":"TestPass123!"}')
          echo "관리자 생성: $ADMIN_RESPONSE"
          
          # 로그인
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8000/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"testadmin","password":"TestPass123!"}')
          echo "로그인: $LOGIN_RESPONSE"
          
          TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.access_token')
          echo "토큰: $TOKEN"
          
          # IAM Manager Service 테스트
          echo "=== IAM Manager Service 테스트 ==="
          
          # 계정 목록 조회
          ACCOUNTS_RESPONSE=$(curl -s http://localhost:8001/api/v1/accounts/)
          echo "계정 목록: $ACCOUNTS_RESPONSE"
          
          # Mock AWS 사용자 조회 (실제 AWS 없이 테스트)
          USERS_RESPONSE=$(curl -s http://localhost:8001/api/v1/accounts/main/users || echo "AWS Mock 필요")
          echo "사용자 목록: $USERS_RESPONSE"
      
      - name: 로그 수집
        if: failure()
        run: |
          echo "=== Auth Service 로그 ==="
          docker-compose -f docker-compose.test.yml logs auth-service
          
          echo "=== IAM Manager 로그 ==="
          docker-compose -f docker-compose.test.yml logs iam-manager
      
      - name: 정리
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # 성능 테스트
  performance-test:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: K6 성능 테스트
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          BASE_URL: http://localhost:8000